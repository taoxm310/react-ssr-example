!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=12)}([function(e,t){e.exports=require("react")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fetchPopularRepos=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"all",t=encodeURI("https://api.github.com/search/repositories?q=stars:>1+language:"+e+"&sort=stars&order=desc&type=Repositories");return(0,a.default)(t).then(function(e){return e.json()}).then(function(e){return e.items}).catch(function(e){return console.warn(e),null})};var r,o=n(6),a=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),u=(r=a)&&r.__esModule?r:{default:r};var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=void 0;return r=e.staticContext.data,n.state={repos:r,loading:!r},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"fetchRepos",value:function(e){var t=this;this.setState(function(){return{loading:!0}}),this.props.fetchInitialData(e).then(function(e){return t.setState(function(){return{repos:e,loading:!1}})})}},{key:"componentDidMount",value:function(){this.state.repos||this.fetchRepos(this.props.match.params.id)}},{key:"componentDidUpdate",value:function(e,t){e.match.params.id!==this.props.match.params.id&&this.fetchRepos(this.props.match.params.id)}},{key:"render",value:function(){var e=this.state,t=e.repos;return e.loading?u.default.createElement("p",null,"LOADING..."):u.default.createElement("ul",{style:{display:"flex",flexWrap:"wrap"}},t.map(function(e){var t=e.name,n=e.owner,r=e.stargazers_count,o=e.html_url;return u.default.createElement("li",{key:t,style:{margin:30}},u.default.createElement("ul",null,u.default.createElement("li",null,u.default.createElement("a",{href:o},t)),u.default.createElement("li",null,"@",n.login),u.default.createElement("li",null,r," starts")))}))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return a.default.createElement("div",null,"Select a Language")};var r,o=n(0),a=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=u(n(3)),o=u(n(2)),a=n(1);function u(e){return e&&e.__esModule?e:{default:e}}var l=[{path:"/",exact:!0,component:r.default},{path:"/popular/:id",component:o.default,fetchInitialData:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return(0,a.fetchPopularRepos)(e.split("/").pop())}}];t.default=l},function(e,t){e.exports=require("react-router-dom")},function(e,t){e.exports=require("isomorphic-fetch")},function(e,t){e.exports=require("serialize-javascript")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),u=s(a),l=n(5),i=s(n(14)),c=s(n(13)),f=s(n(4));function s(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"render",value:function(){return u.default.createElement("div",null,u.default.createElement(i.default,null),u.default.createElement(l.Switch,null,f.default.map(function(e){var t=e.path,n=e.exact,o=e.component,a=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["path","exact","component"]);return u.default.createElement(l.Route,{key:t,path:t,exact:n,render:function(e){return u.default.createElement(o,r({},e,a))}})}),u.default.createElement(l.Route,{render:function(e){return u.default.createElement(c.default,e)}})))}}]),t}();t.default=p},function(e,t){e.exports=require("react-dom/server")},function(e,t){e.exports=require("cors")},function(e,t){e.exports=require("express")},function(e,t,n){"use strict";var r=s(n(11)),o=s(n(10)),a=n(9),u=s(n(8)),l=s(n(0)),i=s(n(7)),c=n(5),f=s(n(4));function s(e){return e&&e.__esModule?e:{default:e}}var p=(0,r.default)();p.use((0,o.default)()),p.use(r.default.static("public")),p.get("*",function(e,t,n){var r=f.default.find(function(t){return(0,c.matchPath)(e.url,t)})||{};(r.fetchInitialData?r.fetchInitialData(e.path):Promise.resolve()).then(function(n){var r={data:n},o=(0,a.renderToString)(l.default.createElement(c.StaticRouter,{location:e.url,context:r},l.default.createElement(u.default,{data:n})));t.send('\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>SSR with RR</title>\n          <script src="/bundle.js" defer><\/script>\n          <script>window.__INITIAL_DATA__ = '+(0,i.default)(n)+'<\/script>\n        </head>\n\n        <body>\n          <div id="app">'+o+"</div>\n        </body>\n      </html>\n    ")}).catch(n)}),p.listen(3e3,function(){console.log("Server is listening on port: 3000")})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return a.default.createElement("div",null,"Four Oh Four")};var r,o=n(0),a=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return a.default.createElement("ul",null,[{name:"All",param:"all"},{name:"Javascript",param:"javascript"},{name:"Ruby",param:"ruby"},{name:"Python",param:"python"},{name:"Java",param:"java"}].map(function(e){var t=e.name,n=e.param;return a.default.createElement("li",{key:n},a.default.createElement(u.NavLink,{activeStyle:{fontWeight:"bold"},to:"/popular/"+n},t))}))};var r,o=n(0),a=(r=o)&&r.__esModule?r:{default:r},u=n(5)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,